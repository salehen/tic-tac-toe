[{"C:\\php\\htdocs\\react\\tic-tac-toe\\src\\index.js":"1","C:\\php\\htdocs\\react\\tic-tac-toe\\src\\reportWebVitals.js":"2","C:\\php\\htdocs\\react\\tic-tac-toe\\src\\app.jsx":"3","C:\\php\\htdocs\\react\\tic-tac-toe\\src\\components\\game.jsx":"4","C:\\php\\htdocs\\react\\tic-tac-toe\\src\\components\\board.jsx":"5","C:\\php\\htdocs\\react\\tic-tac-toe\\src\\components\\square.jsx":"6"},{"size":500,"mtime":1606804566000,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":246,"mtime":1606806312000,"results":"10","hashOfConfig":"8"},{"size":2747,"mtime":1606940245573,"results":"11","hashOfConfig":"8"},{"size":754,"mtime":1606938604293,"results":"12","hashOfConfig":"8"},{"size":233,"mtime":1607972484987,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"jsuyrd",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\php\\htdocs\\react\\tic-tac-toe\\src\\index.js",[],["28","29"],"C:\\php\\htdocs\\react\\tic-tac-toe\\src\\reportWebVitals.js",[],"C:\\php\\htdocs\\react\\tic-tac-toe\\src\\app.jsx",[],"C:\\php\\htdocs\\react\\tic-tac-toe\\src\\components\\game.jsx",["30","31","32","33"],"import React from 'react';\nimport Board from './board';\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ]\n\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i]\n        if (squares[a] && squares[a] == squares[b] && squares[a] == squares[c]) {\n            return squares[a]\n        }\n    }\n    return null\n}\n\nclass Game extends React.Component {\n    state = {\n        history: [{ squares: Array(9).fill(null) }],\n        stepCounter: 0,\n        xIsNext: true,\n    }\n    clickHandler = i => {\n        const history = this.state.history.slice(0, this.state.stepCounter + 1)\n        const current = history[history.length - 1]\n        const squares = current.squares.slice()\n\n        if (calculateWinner(squares) || squares[i]) {\n            return\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O'\n        this.setState({\n            history: history.concat([{ squares }]),\n            stepCounter: history.length,\n            xIsNext: !this.state.xIsNext\n        })\n    }\n\n    jumpTo = step => {\n        this.setState({\n            stepCounter: step,\n            xIsNext: step % 2 == 0\n        })\n    }\n\n    render() {\n        const history = this.state.history\n        const current = history[this.state.stepCounter]\n        const winner = calculateWinner(current.squares)\n        const moves = history.map((_, move) => {\n            const desc = move ? 'Go To Move #' + move : 'Reset Game';\n            return (\n                <li key={move}>\n                    <button className='move-btn' onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            )\n        })\n        let status = ''\n        let win = false\n        if (winner) {\n            if (winner == 'X') {\n                status = 'Winner - Player One (X).'\n            }else{\n                status = 'Winner - Player Two (O).'\n            }\n            win = true            \n        } else {\n            status = 'Next Player - ' + (this.state.xIsNext ? 'Player One (X)' : 'Player Two (O)')\n        }\n        return (\n            <div className='game'>\n                <h3>The Ultimate Game</h3>\n                <div className='game-board'>\n                    <Board\n                        square={current.squares}\n                        onClick={this.clickHandler}\n                    />\n                </div>\n                <div className='game-info'>\n                    <div className={win?'win status':'status'}>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Game;","C:\\php\\htdocs\\react\\tic-tac-toe\\src\\components\\board.jsx",[],"C:\\php\\htdocs\\react\\tic-tac-toe\\src\\components\\square.jsx",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":18,"column":38,"nodeType":"40","messageId":"41","endLine":18,"endColumn":40},{"ruleId":"38","severity":1,"message":"39","line":18,"column":66,"nodeType":"40","messageId":"41","endLine":18,"endColumn":68},{"ruleId":"38","severity":1,"message":"39","line":50,"column":31,"nodeType":"40","messageId":"41","endLine":50,"endColumn":33},{"ruleId":"38","severity":1,"message":"39","line":69,"column":24,"nodeType":"40","messageId":"41","endLine":69,"endColumn":26},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]